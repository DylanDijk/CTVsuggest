load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/accuracy.rda?raw=true"))
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/model_accuracy.rda?raw=true"))
paste(model_accuracy)
paste(digits(model_accuracy,2))
paste(round(model_accuracy,2))
model_accuracy = load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/predicted_probs_for_suggestions.rda?raw=true"))
attr(model_accuracy, date)
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/model_accuracy.rda?raw=true"))
attr(model_accuracy, date)
attr(model_accuracy, "date")
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/model.rda?raw=true"))
devtools::build_readme()
fun_test = function(x){}
y = data.frame(c("1","2","3"), c(1,2,3))
y
y = data.frame(c("a","b","c"), c(1,2,3))
y
y = data.frame(t = c("a","b","c"),n = c(1,2,3))
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/predicted_probs_for_suggestions.rda?raw=true"))
predicted_probs_for_suggestions
class(predicted_probs_for_suggestions)
y = data.frame(n = c(1,2,3))
rownames(y) =  c("a","b","c")
y
fun_test = function(x){
return(y[x,])
}
fun_test = function(x){
return(predicted_probs_for_suggestions[x,])
}
predicted_probs_for_suggestions
taskview = "Econometrics"
n = 5
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:n,]
suggestions
length(NA)
length(NULL)
suggestions
suggestions[!"JFE",]
suggestions[rownames(suggestions) != "JFE",]
suggestions[rownames(suggestions) != "GVARX",]
suggestions[rownames(suggestions) != c("GVARX", "JFE"),]
suggestions[!(rownames(suggestions) %in% c("GVARX", "JFE")),]
suggestions[!(rownames(suggestions) %in% c("GVARX", "abe")),]
!(rownames(suggestions) %in% c("GVARX", "abe"))
taskview = "Econometrics"
n = 5
ignore = c("GVARX", "JFE")
taskview = "Econometrics"
ignore = c("GVARX", "JFE")
taskview = "Econometrics"
n = 5
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/predicted_probs_for_suggestions.rda?raw=true"))
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:(n+length(ignore)),]
if(!is.na(ignore)){
suggestions = suggestions[!(rownames(suggestions) %in% ignore)]
}
if(!is.null(ignore)){
suggestions = suggestions[!(rownames(suggestions) %in% ignore)]
}
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/predicted_probs_for_suggestions.rda?raw=true"))
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:(n+length(ignore)),]
suggestions
if(!is.null(ignore)){
suggestions = suggestions[!(rownames(suggestions) %in% ignore)]
}
if(!is.null(ignore)){
suggestions = suggestions[!(rownames(suggestions) %in% ignore),]
}
suggestions = suggestions[1:n]
suggestions = suggestions[1:n,]
suggestions
CTVsuggest = function(taskview = "Econometrics", n = 5, ignore = NULL){
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/predicted_probs_for_suggestions.rda?raw=true"))
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:(n+length(ignore)),]
if(!is.null(ignore)){
suggestions = suggestions[!(rownames(suggestions) %in% ignore),]
}
suggestions = suggestions[1:n,]
return(suggestions)
}
CTVsuggest(ignore = ignore = c(
CTVsuggest(ignore = c(
"JFE", # not of interest because it's the wrong kind of cloud (2021-07-03 -Pach치)
"GVARX", # removed because package4 replaced it (2021-07-03 -Pach치)
"abe"  # not recommended because it uses old security protocols. Reevaluate package if TLS 1.3+ is used. (2022-05-28 -Will)
))
CTVsuggest(ignore = c(
"JFE", # not of interest because it's the wrong kind of cloud (2021-07-03 -Pach치)
"GVARX", # removed because package4 replaced it (2021-07-03 -Pach치)
"abe",  # not recommended because it uses old security protocols. Reevaluate package if TLS 1.3+ is used. (2022-05-28 -Will)
"summclust"  # not recommended because it uses old security protocols. Reevaluate package if TLS 1.3+ is used. (2022-05-28 -Will)
))
CTVsuggest(n = 8)
devtools::load_all()
devtools::load_all()
CTVsuggest()
CTVsuggest(ignore = "JFE")
CTVsuggest(ignore = c("JFE", "iForecast"))
devtools::load_all()
CTVsuggest(ignore = c("JFE", "iForecast"))
CTVsuggest("ChemPhys",ignore = c("JFE", "iForecast"))
CTVsuggest("ChemPhys",ignore = c("JFE", "iForecast", "readBrukerFlexData"))
devtools::check()
devtools::document()
pkgload::dev_help('CTVsuggest')
devtools::document()
pkgload::dev_help('CTVsuggest')
devtools::document()
pkgload::dev_help('CTVsuggest')
devtools::check()
devtools::document()
CTVsuggest::CTVsuggest("Econometrics", ignore = c(
+ "GVARX" # better suited for TimeSeries TV
+ ))
CTVsuggest::CTVsuggest("Econometrics", ignore = c(
"GVARX" # better suited for TimeSeries TV
))
CTVsuggestTrain:::get_NLP
getwd()
getwd()
system("cd ..")
getwd()
package_prob = predicted_probs_for_suggestions[package,, drop = F][order(predicted_probs_for_suggestions[package,], decreasing = T),, drop = F]
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/predicted_probs_for_suggestions.rda?raw=true"))
package_prob = predicted_probs_for_suggestions[package,, drop = F][order(predicted_probs_for_suggestions[package,], decreasing = T),, drop = F]
package = "gMOIP"
package_prob = predicted_probs_for_suggestions[package,, drop = F][order(predicted_probs_for_suggestions[package,], decreasing = T),, drop = F]
package_prob
predicted_probs_for_suggestions[package,, drop = F]
predicted_probs_for_suggestions[package,, drop = F]
package_prob = predicted_probs_for_suggestions[package,, drop = F][order(predicted_probs_for_suggestions[package,], decreasing = T),, drop = F]
package_prob
order(predicted_probs_for_suggestions[package,], decreasing = T)
predicted_probs_for_suggestions[package,, drop = F]
package_prob = predicted_probs_for_suggestions[package,-"Packages", drop = F]
which(colnames(predicted_probs_for_suggestions) == "Packages")
predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F]
package_prob = predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = T]
package_prob
package_prob = as.vector(predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = T])
package_prob
package_prob = predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = T]
package_prob
package_prob = predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F]
package_prob
order(predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F])
package_prob = predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F])
package_prob = predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F]
package_prob
package_prob = predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F]
package_prop = round(package_prob,4)
package_prob = predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F]
package_prob = round(package_prob,4)
package_prob
attr(predicted_probs_for_suggestions, "date")
package_prob = predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F]
package_prob = round(package_prob,4)
package_prob = predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F]
package_prob = round(package_prob,5)
package_prob
package_prob = round(package_prob,4)
order(package_prob)
package_prob = round(package_prob,4)[1,]
package_prob
package_prob = as.vector(round(package_prob,4)[1,])
package_prob
package_prob = unlist(round(package_prob,4))
package_prob = as.matrix(predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F])
package_prob = round(package_prob,4)
package_prob
order(package_prob)
package_prob = package_prob[order(package_prob)]
package_prob
package_prob = as.matrix(predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F])
package_prob = round(package_prob,4)
package_prob
package_prob = package_prob[,order(package_prob, decreasing = T)]
package_prob
package_prob = package_prob[,order(package_prob, increasing = T)]
package_prob = as.matrix(predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F])
package_prob = round(package_prob,4)
package_prob = package_prob[,order(package_prob)]
package_prob
CTVsuggest = function(taskview = "Econometrics", n = 5, ignore = NULL, package = NA){
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/predicted_probs_for_suggestions.rda?raw=true"))
# Outputting probability vector for a package
if(!is.na(package)){
package_prob = as.matrix(predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F])
package_prob = round(package_prob,4)
package_prob = package_prob[,order(package_prob)]
return(package_prob)
# Outputting packages with highest probabilities for a Task View
} else {
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:(n+length(ignore)),]
if(!is.null(ignore)){
suggestions = suggestions[!(rownames(suggestions) %in% ignore),]
}
suggestions = suggestions[1:n,]
return(suggestions)
}
}
CTVsuggest(package = "gMOIP")
CTVsuggest(taskview = "Optimization", n = 80)
CTVsuggest(taskview = "Optimization", n = 100)
optim_100 = CTVsuggest(taskview = "Optimization", n = 100)
which(rowname(optim_100 == "gMOIP"))
which(rownames(optim_100 == "gMOIP"))
which(rownames(optim_100) == "gMOIP")
which(rownames(optim_100) == "optisolve")
which(rownames(optim_100) == "optiSolve")
CTVsuggest(package = "optiSolve")
CTVsuggest(package = "gMOIP")
which(rownames(optim_100) == "optiSolve")
which(rownames(optim_100) == "FuzzyLP")
CTVsuggest(package = "FuzzyLP")
CTVsuggest(package = "goalp")
CTVsuggest(package = "graDiEnt")
which(rownames(optim_100) == "graDiEnt")
which(rownames(optim_100) == "CGNM")
CTVsuggest(package = "CGNM")
CTVsuggest(package = "MaOEA")
CTVsuggest(package = "gena")
CTVsuggest(package = "ao")
CTVsuggest(package = "soobench")
CTVsuggest(package = "bgw")
CTVsuggest(package = "EmiR")
CTVsuggest(package = "optimization")
CTVsuggest(package = "optimizeR")
CTVsuggest = function(taskview = "Econometrics", n = 5, ignore = NULL, package = NA){
load(url("https://github.com/DylanDijk/CTVsuggestTrain/blob/main/OUTPUT/predicted_probs_for_suggestions.rda?raw=true"))
# Outputting probability vector for a package
if(!is.na(package)){
package_prob = as.matrix(predicted_probs_for_suggestions[package,-which(colnames(predicted_probs_for_suggestions) == "Packages"), drop = F])
package_prob = round(package_prob,4)
package_prob = package_prob[,order(package_prob)]
return(package_prob)
# Outputting packages with highest probabilities for a Task View
} else {
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:(n+length(ignore)),]
if(!is.null(ignore)){
suggestions = suggestions[!(rownames(suggestions) %in% ignore),]
}
suggestions = suggestions[1:n,]
return(suggestions)
}
}
CTVsuggest("octopus")
CTVsuggest(package = "octopus")
