[{"path":"https://dylandijk.github.io/CTVsuggest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 CTVsuggest authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"objective-of-the-ctvsuggest-package","dir":"Articles","previous_headings":"","what":"Objective of the CTVsuggest Package","title":"CTVsuggest Overview","text":"CRAN Task Views maintained volunteers, always welcome contributions additional content members community. Due huge number packages CRAN, infeasible Task View maintainer review available packages. Therefore, model give suggestions maintainer review useful. aim CTVsuggest give suggestions packages added CRAN Task Views. single function, CTVsuggest(), outputs suggestions.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"ctvsuggest-example","dir":"Articles","previous_headings":"","what":"CTVsuggest Example","title":"CTVsuggest Overview","text":"First install CTVsuggest package: attach package. output top 5 suggested packages NaturalLanguageProcessing Task View:","code":"library(devtools) install_github(\"DylanDijk/CTVsuggest\") library(CTVsuggest) CTVsuggest(n = 5, taskview = \"NaturalLanguageProcessing\") #>                NaturalLanguageProcessing       Packages #> LSX                            0.9933631            LSX #> doc2vec                        0.9879443        doc2vec #> morestopwords                  0.9790580  morestopwords #> text.alignment                 0.9533054 text.alignment #> syn                            0.9281045            syn"},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"the-package-workflow","dir":"Articles","previous_headings":"","what":"The Package Workflow","title":"CTVsuggest Overview","text":"Alongside CTVsuggest package, CTVsuggestTrain package. CTVsuggestTrain contains functions execute training model. particular, CTVsuggestTrain::Train_model() trains multinomial logistic regression model, outcome categories available CRAN Task Views plus additional \"none\" category. addition, training model, Train_model() returns data.frame containing predicted classification probabilities CRAN packages CRAN Task Views. current workflow run CTVsuggestTrain::Train_model() function weekly, time storing data.frame predicted probabilities CTVsuggestTrain GitHub repo. CTVsuggest package loads data.frame output suggestions different Task Views, shown example.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"the-model","dir":"Articles","previous_headings":"","what":"The Model","title":"CTVsuggest Overview","text":"now provide high level view model trained. CTVsuggestTrain Section provides overview CTVsuggestTrain package executes model training, section also contains links functions documentation source code. comprehensive description model building process, view Section 4 long form report.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"multinomial-logistic-regression","dir":"Articles","previous_headings":"The Model","what":"Multinomial Logistic Regression","title":"CTVsuggest Overview","text":"model aims give Task View suggestion giving set features unassigned CRAN R package. exist packages assigned multiple Task Views, looked classifying packages single Task View. Therefore, set multi-class classification problem, compared multi-label problem. However, reasonable assign Task View every package. depart objective Task Views, give sharp focus packages needed task1. reason, model also possibility assigning package Task View. Therefore, included additional \"none\" outcome category hence number possible labels classification problem number Task Views + 1. perform multi-class classification problem used multinomial logistic model LASSO penalty, trained using glmnet::cv.glmnet() function. cv.glmnet() function performs cross-validation grid lambda values, providing measure performance lambda values. select model lowest average multinomial deviance across folds (lambda.min).","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"features","dir":"Articles","previous_headings":"The Model","what":"Features","title":"CTVsuggest Overview","text":"order construct multinomial logistic model, need create set features CRAN packages. used three different types data create features model: (let \\(n\\) denote number currently available Task Views) Text data Package Task View descriptions. \\(n\\) features Package dependencies. \\(n + 1\\) features Packages developed Authors. \\(n + 1\\) features now go detail constructed features data.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"text-data-from-package-and-task-view-descriptions","dir":"Articles","previous_headings":"The Model > Features","what":"Text data from Package and Task View descriptions","title":"CTVsuggest Overview","text":"Example: Econometrics Task View description Example: fxregime package web page extract Task View text data corresponding markdown files, stored GitHub repository corresponding Task View. also extract titles descriptions packages. vectorize texts using TF-IDF method, compute cosine similarity vectorized package text vectorized Task View text create \\(n\\) features. View Section 3.3.2 detailed description text vectorization.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"package-dependencies","dir":"Articles","previous_headings":"The Model > Features","what":"Package Dependencies","title":"CTVsuggest Overview","text":"package, look immediate hard dependencies2 packages, calculate proportion assignment packages Task Views. creates \\(n + 1\\) features CRAN R package.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"authors-other-packages","dir":"Articles","previous_headings":"The Model > Features","what":"Authors Other Packages","title":"CTVsuggest Overview","text":"package look packages created authors package. calculate proportion packages assigned Task View. creates another \\(n + 1\\) features CRAN R package.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"training-data","dir":"Articles","previous_headings":"The Model","what":"Training Data","title":"CTVsuggest Overview","text":"train test model used packages assigned Task View, also used set packages labelled belonging Task View. large proportion packages belonging Task View reviewed Task View maintainers, representative packages belonging \"none\" category. Therefore choose packages include labelled belonging \"none\" category, select packages high amount monthly downloads. set packages split 80:20 ratio, training testing set. View Section 4.3.1 detailed description training testing sets constructed.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"predictions","dir":"Articles","previous_headings":"The Model","what":"Predictions","title":"CTVsuggest Overview","text":"Using trained model, can get predictions looking predicted classification probabilities given set features package. output predicted classification probabilities packages assigned Task View meet monthly download threshold mentioned previous section.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"accuracy","dir":"Articles","previous_headings":"The Model","what":"Accuracy","title":"CTVsuggest Overview","text":"accuracy model can measured comparing trained model predictions testing set. particular, set predicted Task View one largest predicted probability. accuracy measured proportion correct predictions testing set. packages assigned multiple Task Views, set prediction accurate prediction one assigned Task Views. current (2023-06-27 09:24:00.938368) accuracy : 82.71%.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/articles/CTVsuggest-Overview.html","id":"ctvsuggesttrain","dir":"Articles","previous_headings":"","what":"CTVsuggestTrain","title":"CTVsuggest Overview","text":"CTVsuggestTrain package contains code used training model. install CTVsuggestTrain package: mentioned , training models performed CTVsuggestTrain::Train_model() function. function uses four internal functions CTVsuggestTrain package run order: get_data() get_NLP() get_create_features() get_CRAN_logs() description steps taken function, view details section documentation.","code":"library(devtools) install_github(\"DylanDijk/CTVsuggestTrain\")"},{"path":"https://dylandijk.github.io/CTVsuggest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Dijk. Author, maintainer.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dijk D (2023). CTVsuggest: CRAN Task View Package Recommendations. https://dylandijk.github.io/CTVsuggest/, https://github.com/dylandijk/CTVsuggest.","code":"@Manual{,   title = {CTVsuggest: CRAN Task View Package Recommendations},   author = {Dylan Dijk},   year = {2023},   note = {https://dylandijk.github.io/CTVsuggest/, https://github.com/dylandijk/CTVsuggest}, }"},{"path":"https://dylandijk.github.io/CTVsuggest/index.html","id":"ctvsuggest","dir":"","previous_headings":"","what":"CRAN Task View Package Recommendations","title":"CRAN Task View Package Recommendations","text":"aim CTVsuggest provide recommendations packages added available CRAN Task Views. CTVsuggest R package single simple function: CTVsuggest(), outputs package suggestions. model training carried CTVsuggestTrain package, detail workflow view Packages Workflow Section CTVsuggest Overview Vignette.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"CRAN Task View Package Recommendations","text":"can install development version CTVsuggest GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DylanDijk/CTVsuggest\")"},{"path":"https://dylandijk.github.io/CTVsuggest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"CRAN Task View Package Recommendations","text":"CTVsuggest() function takes Task View name (taskview) n arguments. outputs data.frame containing top n recommendations chosen Task View.","code":"library(CTVsuggest)  CTVsuggest(taskview = \"NaturalLanguageProcessing\", n = 5) #>                NaturalLanguageProcessing       Packages #> LSX                            0.9981190            LSX #> doc2vec                        0.9917591        doc2vec #> jiebaRD                        0.9835720        jiebaRD #> text.alignment                 0.9726128 text.alignment #> R.temis                        0.9644548        R.temis"},{"path":"https://dylandijk.github.io/CTVsuggest/reference/CTVsuggest.html","id":null,"dir":"Reference","previous_headings":"","what":"Output CRAN Task View suggestions — CTVsuggest","title":"Output CRAN Task View suggestions — CTVsuggest","text":"CTVsuggest() function takes Task View name argument n, outputs data.frame containing top n recommendations chosen Task View.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/reference/CTVsuggest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output CRAN Task View suggestions — CTVsuggest","text":"","code":"CTVsuggest(taskview = \"Econometrics\", n = 5)"},{"path":"https://dylandijk.github.io/CTVsuggest/reference/CTVsuggest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output CRAN Task View suggestions — CTVsuggest","text":"taskview character vector one element, must one Task Views available n integer decides number suggestions show.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/reference/CTVsuggest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output CRAN Task View suggestions — CTVsuggest","text":"data.frame suggested packages classification probability.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/reference/CTVsuggest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Output CRAN Task View suggestions — CTVsuggest","text":"predicted probabilities computed model object constructed CTVsuggestTrain::Train_model() function.","code":""},{"path":"https://dylandijk.github.io/CTVsuggest/reference/CTVsuggest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output CRAN Task View suggestions — CTVsuggest","text":"","code":"CTVsuggest(taskview = \"Econometrics\", n = 5) #>        Econometrics Packages #> GVARX     0.9932598    GVARX #> bgw       0.9894208      bgw #> iClick    0.9891839   iClick #> gbmt      0.9875730     gbmt #> JFE       0.9873618      JFE"}]
